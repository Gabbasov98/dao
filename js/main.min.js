$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".favourite-btn").click(function () {
    $(this).toggleClass("_added")
})

$(".tags__show").click(function () {
    $(this).parents(".tags").toggleClass("_open")
})

$(".pass-toggle").click(function () {
    if($(this).hasClass("_active")){
        $(this).removeClass("_active")
        $(this).siblings("input").attr("type","password")
    } else{
        $(this).addClass("_active")
        $(this).siblings("input").attr("type","text")
    }
})



$(".header-search__show").click(function () {
    $(".header-search").toggleClass("_open")
})

$(document).mouseup( function(e){
    let div = $( ".header-search,.tags,.profile-nav,.search-block" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});

$("._search-field").on("input",function () {
    if($(this).val().length > 3){
        $(this).parents(".search-block").addClass("_open")
    }
})

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")
        let isWheel = slider.classList.contains("_wheel")

        if(isWheel){
            isWheel = {
                releaseOnEdges: isWheel,
            }
        }

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            mousewheel: isWheel,
            loop: isLoop,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}

function dateFeedSlider() {
    var swiper = new Swiper('.date-feed .swiper-container', {
        slidesPerView: 26,
        slidesPerGroup: 26,
        spaceBetween: 0,
        allowTouchMove: false,
        navigation: {
            nextEl: '.date-feed .swiper-button-next',
            prevEl: '.date-feed .swiper-button-prev',
        },
        breakpoints: {
            100: {
                slidesPerView: "auto",
                slidesPerGroup: 1,
                allowTouchMove: true,
            },
            992: {
                slidesPerView: 27,
                slidesPerGroup: 27,
                allowTouchMove: false,
            },
        },
        on: {
            init: function () {
                if(window.innerWidth>992){
                    this.slideTo(this.slides.length-1,0)
                }
            },
        },
    })
}


Sliders()
gallery()
dateFeedSlider()

$(".city-select").click(function () {
    openModal("cityModal")
})

$(".cities__item").click(function () {
    $(".cities__item").removeClass("_active")
    $(this).addClass("_active")

    let cityName = $(this).find("span").html().trim()

    $(".city-select__current").html(cityName)
    closeModals()
})

$("._toggle-date-filter").click(function () {
    $(".date-filter").toggleClass("_active")
    $(".date-modal").toggleClass("_active2")
    let eventsBlock = document.querySelector(".events2")
    if(eventsBlock && window.innerWidth > 992){
        document.body.scrollTop = document.documentElement.scrollTop = 300;
    }
})

let closeDateFilterMobButton = document.querySelector(".date-modal .close-btn-mob")

if(closeDateFilterMobButton){
    closeDateFilterMobButton.addEventListener('swiped-down',function (e) {
        $(".date-modal").removeClass("_active2")
        setTimeout(()=>{
            $(".date-filter").removeClass("_active")
        },300)
    })
}



$(".answer__more").click(function () {
    $(this).parents(".answer__info").toggleClass("_open")
})

$("._toggle-faq-answer").click(function () {
    let parent = $(this).parents(".faq-card")
    if($(parent).hasClass("_open")){
        $(".faq-card").removeClass("_open")
        $(".faq-card__answer").slideUp()
    } else{
        $(".faq-card").removeClass("_open")
        $(".faq-card__answer").slideUp()
        $(parent).addClass("_open")
        $(parent).find(".faq-card__answer").slideDown()
    }
})

$(document).mouseup( function(e){
    let div = $( ".date-filter" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_active")){
            $(div).removeClass("_active")
        }
    }
});

$(".m-text-field textarea").on("input",function () {
    let id = $(this).attr("data-id")
    $(`.question-form__field-count[data-id="1"]`).html($(this).val().length)
})

$(".profile-nav__current").html($(".profile-nav__link._active").html())

$(".profile-nav__show").click(function () {
    $(".profile-nav").toggleClass("_open")
})

$(".chat-item").click(function () {
    $(".chat").addClass("_open")
})
$(".chat-area__back").click(function () {
    $(".chat").removeClass("_open")
})

$('[name="pricing"]').change(function () {
    let val = $(this).attr("data-value")
    let checked = $(this).prop("checked")
    console.log(val)
    if(checked){
        $('[name="pricing"]').prop("checked",false)
        $(this).prop("checked",true)
    }
    setActivePrice()
})

$('[name="pricing"]').click(function () {
    let checked = $(this).prop("checked")
    if(checked){
        // $(this).prop("checked",false)
    }
})

$(".pricing__value").click(function () {
    console.log(true)
    $(".pricing__item").removeClass("_active")
    $('[name="pricing"]:checked').prop("checked",false)
    $(".pricing__count").addClass("_active")
})

function setActivePrice() {
    let checkedPrice = $('[name="pricing"]:checked')
    $(".pricing__item").removeClass("_active")
    $(checkedPrice).parents(".pricing__item").addClass("_active")
    if($(checkedPrice).parents(".pricing__item").hasClass("pricing__count")){
        $(".pricing__count").addClass("_active")
    }
}

setActivePrice()

$('.filter .swiper-wrapper').on('scroll', function(e){
    $(".param-select").removeClass("_open")
});

$(".param-select").each(function (i,el) {
    let toggleBtn = $(el).find(".param-select__show")
    let current = $(el).find(".param-select__current")

    $(toggleBtn).click(function () {
        if($(el).hasClass("_open")){
            $(".param-select").removeClass("_open")
        } else{
            $(".param-select").removeClass("_open")
            $(el).addClass("_open")
        }

        if($(el).hasClass("_modal-view") && window.innerWidth <= 992){
            $(".m-page").addClass("fixed-body")
            $(".m-page").addClass("_open-select-modal")
        }
    })

    $(document).mouseup( function(e){
        let div = $(el);
        if ( !div.is(e.target)
            && div.has(e.target).length === 0 ) {
            if($(div).hasClass("_open")){
                $(div).removeClass("_open")
            }
        }
    });

    $(el).find(".param-select__option input").change(function () {
        if($(this).attr("type") === 'radio'){
            $(el).removeClass("_open")

            if($(this).hasClass("_disabled")){
                return
            }
        } else{
            $(el).find(".param-select__option input").each(function (i,checkbox) {
                if($(checkbox).prop("checked")){
                    $(checkbox).parents(".param-select__option").addClass("_checked")
                }else{
                    $(checkbox).parents(".param-select__option").removeClass("_checked")
                }
            })
        }
        setActiveOption()
    })

    setActiveOption()

    function setActiveOption() {
        let activeOptions = $(el).find(".param-select__option input:checked")


        let optionsArray = []
        activeOptions.each(function (i,el) {
            optionsArray.push($(el))
        })

        if(activeOptions.length === 1){
            $(current).html($(optionsArray[0]).attr("data-value"))
            $(el).addClass("_selected")
        } else if(activeOptions.length > 1){
            $(current).html(`
            ${$(optionsArray[0]).attr("data-value")} ,+${optionsArray.length - 1}
            `)

            $(el).addClass("_selected")
        } else{
            $(current).html("Выбрать")
            let placeholder = $(current).attr("data-placeholder")
            if(placeholder){
                $(current).html(placeholder)
            }
            $(el).removeClass("_selected")
        }



        let selectedFilters = $(".param-slider .param-select._selected")

        if(selectedFilters.length>0){
            $(".filter").addClass("_filters-selected")
        }else{
            $(".filter").removeClass("_filters-selected")
        }
    }

    $(el).find(".param-select__option-clear").click(function () {
        $(this).siblings("input").prop("checked",false)
        setActiveOption()
    })

    $(el).find(".param-select__clear,._clear-filter-item").click(function (e) {
        e.stopPropagation()
        $(el).find(".param-select__option input").each(function (i,input) {
            $(input).prop("checked",false)
        })
        setActiveOption()
        $(el).removeClass("_open")
    })

    $(el).find("._confirm-filter-item").click(function () {
        $(el).removeClass("_open")
    })

    $(".filter__clear").click(function () {
        $(".param-slider .param-select input").each(function (i,input) {
            $(input).prop("checked",false)
        })
        setActiveOption()
    })


    $(el).find(".param-select__bg").click(function () {
        closeSelectMob()
    })

    $(el).find(".close-btn-mob").click(function () {
        closeSelectMob()
    })

    function closeSelectMob() {
        $(el).removeClass("_open")
        $(".m-page").removeClass("fixed-body")
        $(".m-page").removeClass("_open-select-modal")
    }
})

let closeDateFilterMobButtons = document.querySelectorAll(".param-select .close-btn-mob")

closeDateFilterMobButtons.forEach(btn => {
    btn.addEventListener('swiped-down',function (e) {
        $(".param-select").removeClass("_open")
        $(".m-page").removeClass("fixed-body")
        $(".m-page").removeClass("_open-select-modal")
    })
})



let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`);
    const rangeInput = slider.querySelector(`.range-slider__input`);

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: 0,
            connect: [true, false],
            step: 1,
            range: {
                min: 0,
                max: 100
            },
            pips: {
                mode: 'range',
                density: 1,
                filter: function filterPips(value, type) {
                    return value % 20 ? -1 : 1;
                },
                format: {
                    to: function(value) {
                        let targetIndex = value > 0 ? 5 - Math.ceil(100 / value) + 1 : 0;
                        return document.querySelectorAll('.filter-slider__bottom .filter-slider__title')[targetIndex].innerText
                    }
                }
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('change', function(values, handle) {
            let value = Number(values[0]);
            let valueSanitized = Math.abs((value % 20) / 20) < 0.3 ? Math.round(value / 20) * 20 : Math.ceil(value / 20) * 20;
            if (value !== valueSanitized) {
                rangeSlider.noUiSlider.set(valueSanitized);
            }
        });
    }
})

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)
    let closeMobButton = modal.querySelector(`.close-btn-mob`)

    modal.classList.add("_active")
    modal.classList.add("_active2")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            modal.classList.remove("_active2")
            body.classList.remove("fixed-body2")
        }
    })

    closeMobButton.addEventListener('swiped-down',function (e) {
        modal.classList.remove("_active2")
        setTimeout(()=>{
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        },300)
    })

    closeMobButton.addEventListener('click',function (e) {
        modal.classList.remove("_active2")
        setTimeout(()=>{
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        },300)
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7          -  -  ' });

    let localeRu = {
        days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
        daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
        daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
        monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
        today: 'Сегодня',
        clear: 'Очистить',
        dateFormat: 'dd.MM.yyyy',
        timeFormat: 'HH:mm',
        firstDay: 1
    };

    let dateInputs = document.querySelectorAll('.date-input input')
    let dateInputs2 = document.querySelectorAll('.date-input2 input')
    dateInputs.forEach(el => {
        new AirDatepicker(el, {
            locale: localeRu,
            autoClose: true,
            inline: true,
            range: true,
            // selectedDates: [new Date()],
            onSelect: () => {
                $(".date-input").addClass("input-active")
            },
            buttons: [
                {
                    content: 'Сегодня',
                    attrs: {
                        class: 'datepicker-button'
                    },
                    onClick: (dp) => {
                        let today = new Date();
                        dp.selectDate(today);
                        dp.setViewDate(today);
                    }
                },
                {
                    content: 'Завтра',
                    attrs: {
                        class: 'datepicker-button'
                    },
                    onClick: (dp) => {
                        let tomorrow = new Date();
                        tomorrow.setDate(tomorrow.getDate() + 1);
                        dp.selectDate(tomorrow);
                        dp.setViewDate(tomorrow);
                    }
                },
                {
                    content: 'В выходные',
                    attrs: {
                        class: 'datepicker-button'
                    },
                    onClick: (dp) => {
                        let now = new Date();
                        let weekend = new Date();
                        let day = now.getDay();
                        let difference = day === 0 ? 0 : 7 - day; // Если сегодня воскресенье, выбираем его
                        weekend.setDate(now.getDate() + difference);
                        dp.selectDate(weekend);
                        dp.setViewDate(weekend);
                    }
                },
                {
                    content: 'Применить',
                    attrs: {
                        class: 'button-apply large'
                    },
                    onClick: (dp) => {
                        // Здесь ваша логика для кнопки "Применить"
                        console.log('Выбранная дата:', dp.selectedDates);
                    }
                }
            ],
        })
    })
    dateInputs2.forEach(el => {
        new AirDatepicker(el, {
            locale: localeRu,
            autoClose: true,
            // range: true,
            // selectedDates: [new Date()],
            onSelect: () => {
                $(".date-input2").addClass("input-active")
            },
        })
    })

    $(".fg select").niceSelect()
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
